/* automatically generated by rust-bindgen 0.66.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const OIDN_VERSION_MAJOR: u32 = 2;
pub const OIDN_VERSION_MINOR: u32 = 0;
pub const OIDN_VERSION_PATCH: u32 = 1;
pub const OIDN_VERSION: u32 = 20001;
pub const OIDN_VERSION_STRING: &[u8; 6] = b"2.0.1\0";
pub const OIDN_UUID_SIZE: u32 = 16;
pub const OIDN_LUID_SIZE: u32 = 8;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_data_public> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_pointers> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    const UNINIT: ::std::mem::MaybeUninit<_Mbstatet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUstream_st {
    _unused: [u8; 0],
}
pub type cudaStream_t = *mut CUstream_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ihipStream_t {
    _unused: [u8; 0],
}
pub type hipStream_t = *mut ihipStream_t;
extern "C" {
    pub fn oidnGetNumPhysicalDevices() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn oidnGetPhysicalDeviceBool(
        physicalDeviceID: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn oidnGetPhysicalDeviceInt(
        physicalDeviceID: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn oidnGetPhysicalDeviceString(
        physicalDeviceID: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn oidnGetPhysicalDeviceData(
        physicalDeviceID: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        byteSize: *mut usize,
    ) -> *const ::std::os::raw::c_void;
}
pub const OIDNDeviceType_OIDN_DEVICE_TYPE_DEFAULT: OIDNDeviceType = 0;
pub const OIDNDeviceType_OIDN_DEVICE_TYPE_CPU: OIDNDeviceType = 1;
pub const OIDNDeviceType_OIDN_DEVICE_TYPE_SYCL: OIDNDeviceType = 2;
pub const OIDNDeviceType_OIDN_DEVICE_TYPE_CUDA: OIDNDeviceType = 3;
pub const OIDNDeviceType_OIDN_DEVICE_TYPE_HIP: OIDNDeviceType = 4;
pub type OIDNDeviceType = ::std::os::raw::c_int;
pub const OIDNError_OIDN_ERROR_NONE: OIDNError = 0;
pub const OIDNError_OIDN_ERROR_UNKNOWN: OIDNError = 1;
pub const OIDNError_OIDN_ERROR_INVALID_ARGUMENT: OIDNError = 2;
pub const OIDNError_OIDN_ERROR_INVALID_OPERATION: OIDNError = 3;
pub const OIDNError_OIDN_ERROR_OUT_OF_MEMORY: OIDNError = 4;
pub const OIDNError_OIDN_ERROR_UNSUPPORTED_HARDWARE: OIDNError = 5;
pub const OIDNError_OIDN_ERROR_CANCELLED: OIDNError = 6;
pub type OIDNError = ::std::os::raw::c_int;
pub type OIDNErrorFunction = ::std::option::Option<
    unsafe extern "C" fn(
        userPtr: *mut ::std::os::raw::c_void,
        code: OIDNError,
        message: *const ::std::os::raw::c_char,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OIDNDeviceImpl {
    _unused: [u8; 0],
}
pub type OIDNDevice = *mut OIDNDeviceImpl;
extern "C" {
    pub fn oidnNewDevice(type_: OIDNDeviceType) -> OIDNDevice;
}
extern "C" {
    pub fn oidnNewDeviceByID(physicalDeviceID: ::std::os::raw::c_int) -> OIDNDevice;
}
extern "C" {
    pub fn oidnNewDeviceByUUID(uuid: *const ::std::os::raw::c_void) -> OIDNDevice;
}
extern "C" {
    pub fn oidnNewDeviceByLUID(luid: *const ::std::os::raw::c_void) -> OIDNDevice;
}
extern "C" {
    pub fn oidnNewDeviceByPCIAddress(
        pciDomain: ::std::os::raw::c_int,
        pciBus: ::std::os::raw::c_int,
        pciDevice: ::std::os::raw::c_int,
        pciFunction: ::std::os::raw::c_int,
    ) -> OIDNDevice;
}
extern "C" {
    pub fn oidnNewCUDADevice(
        deviceIDs: *const ::std::os::raw::c_int,
        streams: *const cudaStream_t,
        numPairs: ::std::os::raw::c_int,
    ) -> OIDNDevice;
}
extern "C" {
    pub fn oidnNewHIPDevice(
        deviceIDs: *const ::std::os::raw::c_int,
        streams: *const hipStream_t,
        numPairs: ::std::os::raw::c_int,
    ) -> OIDNDevice;
}
extern "C" {
    pub fn oidnRetainDevice(device: OIDNDevice);
}
extern "C" {
    pub fn oidnReleaseDevice(device: OIDNDevice);
}
extern "C" {
    pub fn oidnSetDeviceBool(device: OIDNDevice, name: *const ::std::os::raw::c_char, value: bool);
}
extern "C" {
    pub fn oidnSetDeviceInt(
        device: OIDNDevice,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn oidnGetDeviceBool(device: OIDNDevice, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn oidnGetDeviceInt(
        device: OIDNDevice,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn oidnSetDeviceErrorFunction(
        device: OIDNDevice,
        func: OIDNErrorFunction,
        userPtr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn oidnGetDeviceError(
        device: OIDNDevice,
        outMessage: *mut *const ::std::os::raw::c_char,
    ) -> OIDNError;
}
extern "C" {
    pub fn oidnCommitDevice(device: OIDNDevice);
}
extern "C" {
    pub fn oidnSyncDevice(device: OIDNDevice);
}
pub const OIDNFormat_OIDN_FORMAT_UNDEFINED: OIDNFormat = 0;
pub const OIDNFormat_OIDN_FORMAT_FLOAT: OIDNFormat = 1;
pub const OIDNFormat_OIDN_FORMAT_FLOAT2: OIDNFormat = 2;
pub const OIDNFormat_OIDN_FORMAT_FLOAT3: OIDNFormat = 3;
pub const OIDNFormat_OIDN_FORMAT_FLOAT4: OIDNFormat = 4;
pub const OIDNFormat_OIDN_FORMAT_HALF: OIDNFormat = 257;
pub const OIDNFormat_OIDN_FORMAT_HALF2: OIDNFormat = 258;
pub const OIDNFormat_OIDN_FORMAT_HALF3: OIDNFormat = 259;
pub const OIDNFormat_OIDN_FORMAT_HALF4: OIDNFormat = 260;
pub type OIDNFormat = ::std::os::raw::c_int;
pub const OIDNStorage_OIDN_STORAGE_UNDEFINED: OIDNStorage = 0;
pub const OIDNStorage_OIDN_STORAGE_HOST: OIDNStorage = 1;
pub const OIDNStorage_OIDN_STORAGE_DEVICE: OIDNStorage = 2;
pub const OIDNStorage_OIDN_STORAGE_MANAGED: OIDNStorage = 3;
pub type OIDNStorage = ::std::os::raw::c_int;
pub const OIDNExternalMemoryTypeFlag_OIDN_EXTERNAL_MEMORY_TYPE_FLAG_NONE:
    OIDNExternalMemoryTypeFlag = 0;
pub const OIDNExternalMemoryTypeFlag_OIDN_EXTERNAL_MEMORY_TYPE_FLAG_OPAQUE_FD:
    OIDNExternalMemoryTypeFlag = 1;
pub const OIDNExternalMemoryTypeFlag_OIDN_EXTERNAL_MEMORY_TYPE_FLAG_DMA_BUF:
    OIDNExternalMemoryTypeFlag = 2;
pub const OIDNExternalMemoryTypeFlag_OIDN_EXTERNAL_MEMORY_TYPE_FLAG_OPAQUE_WIN32:
    OIDNExternalMemoryTypeFlag = 4;
pub const OIDNExternalMemoryTypeFlag_OIDN_EXTERNAL_MEMORY_TYPE_FLAG_OPAQUE_WIN32_KMT:
    OIDNExternalMemoryTypeFlag = 8;
pub const OIDNExternalMemoryTypeFlag_OIDN_EXTERNAL_MEMORY_TYPE_FLAG_D3D11_TEXTURE:
    OIDNExternalMemoryTypeFlag = 16;
pub const OIDNExternalMemoryTypeFlag_OIDN_EXTERNAL_MEMORY_TYPE_FLAG_D3D11_TEXTURE_KMT:
    OIDNExternalMemoryTypeFlag = 32;
pub const OIDNExternalMemoryTypeFlag_OIDN_EXTERNAL_MEMORY_TYPE_FLAG_D3D11_RESOURCE:
    OIDNExternalMemoryTypeFlag = 64;
pub const OIDNExternalMemoryTypeFlag_OIDN_EXTERNAL_MEMORY_TYPE_FLAG_D3D11_RESOURCE_KMT:
    OIDNExternalMemoryTypeFlag = 128;
pub const OIDNExternalMemoryTypeFlag_OIDN_EXTERNAL_MEMORY_TYPE_FLAG_D3D12_HEAP:
    OIDNExternalMemoryTypeFlag = 256;
pub const OIDNExternalMemoryTypeFlag_OIDN_EXTERNAL_MEMORY_TYPE_FLAG_D3D12_RESOURCE:
    OIDNExternalMemoryTypeFlag = 512;
pub type OIDNExternalMemoryTypeFlag = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OIDNBufferImpl {
    _unused: [u8; 0],
}
pub type OIDNBuffer = *mut OIDNBufferImpl;
extern "C" {
    pub fn oidnNewBuffer(device: OIDNDevice, byteSize: usize) -> OIDNBuffer;
}
extern "C" {
    pub fn oidnNewBufferWithStorage(
        device: OIDNDevice,
        byteSize: usize,
        storage: OIDNStorage,
    ) -> OIDNBuffer;
}
extern "C" {
    pub fn oidnNewSharedBuffer(
        device: OIDNDevice,
        devPtr: *mut ::std::os::raw::c_void,
        byteSize: usize,
    ) -> OIDNBuffer;
}
extern "C" {
    pub fn oidnNewSharedBufferFromFD(
        device: OIDNDevice,
        fdType: OIDNExternalMemoryTypeFlag,
        fd: ::std::os::raw::c_int,
        byteSize: usize,
    ) -> OIDNBuffer;
}
extern "C" {
    pub fn oidnNewSharedBufferFromWin32Handle(
        device: OIDNDevice,
        handleType: OIDNExternalMemoryTypeFlag,
        handle: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_void,
        byteSize: usize,
    ) -> OIDNBuffer;
}
extern "C" {
    pub fn oidnGetBufferSize(buffer: OIDNBuffer) -> usize;
}
extern "C" {
    pub fn oidnGetBufferStorage(buffer: OIDNBuffer) -> OIDNStorage;
}
extern "C" {
    pub fn oidnGetBufferData(buffer: OIDNBuffer) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn oidnReadBuffer(
        buffer: OIDNBuffer,
        byteOffset: usize,
        byteSize: usize,
        dstHostPtr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn oidnReadBufferAsync(
        buffer: OIDNBuffer,
        byteOffset: usize,
        byteSize: usize,
        dstHostPtr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn oidnWriteBuffer(
        buffer: OIDNBuffer,
        byteOffset: usize,
        byteSize: usize,
        srcHostPtr: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn oidnWriteBufferAsync(
        buffer: OIDNBuffer,
        byteOffset: usize,
        byteSize: usize,
        srcHostPtr: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn oidnRetainBuffer(buffer: OIDNBuffer);
}
extern "C" {
    pub fn oidnReleaseBuffer(buffer: OIDNBuffer);
}
pub const OIDNQuality_OIDN_QUALITY_DEFAULT: OIDNQuality = 0;
pub const OIDNQuality_OIDN_QUALITY_BALANCED: OIDNQuality = 5;
pub const OIDNQuality_OIDN_QUALITY_HIGH: OIDNQuality = 6;
pub type OIDNQuality = ::std::os::raw::c_int;
pub type OIDNProgressMonitorFunction = ::std::option::Option<
    unsafe extern "C" fn(userPtr: *mut ::std::os::raw::c_void, n: f64) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OIDNFilterImpl {
    _unused: [u8; 0],
}
pub type OIDNFilter = *mut OIDNFilterImpl;
extern "C" {
    pub fn oidnNewFilter(device: OIDNDevice, type_: *const ::std::os::raw::c_char) -> OIDNFilter;
}
extern "C" {
    pub fn oidnRetainFilter(filter: OIDNFilter);
}
extern "C" {
    pub fn oidnReleaseFilter(filter: OIDNFilter);
}
extern "C" {
    pub fn oidnSetFilterImage(
        filter: OIDNFilter,
        name: *const ::std::os::raw::c_char,
        buffer: OIDNBuffer,
        format: OIDNFormat,
        width: usize,
        height: usize,
        byteOffset: usize,
        pixelByteStride: usize,
        rowByteStride: usize,
    );
}
extern "C" {
    pub fn oidnSetSharedFilterImage(
        filter: OIDNFilter,
        name: *const ::std::os::raw::c_char,
        devPtr: *mut ::std::os::raw::c_void,
        format: OIDNFormat,
        width: usize,
        height: usize,
        byteOffset: usize,
        pixelByteStride: usize,
        rowByteStride: usize,
    );
}
extern "C" {
    pub fn oidnUnsetFilterImage(filter: OIDNFilter, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn oidnSetSharedFilterData(
        filter: OIDNFilter,
        name: *const ::std::os::raw::c_char,
        hostPtr: *mut ::std::os::raw::c_void,
        byteSize: usize,
    );
}
extern "C" {
    pub fn oidnUpdateFilterData(filter: OIDNFilter, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn oidnUnsetFilterData(filter: OIDNFilter, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn oidnSetFilterBool(filter: OIDNFilter, name: *const ::std::os::raw::c_char, value: bool);
}
extern "C" {
    pub fn oidnGetFilterBool(filter: OIDNFilter, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn oidnSetFilterInt(
        filter: OIDNFilter,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn oidnGetFilterInt(
        filter: OIDNFilter,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn oidnSetFilterFloat(filter: OIDNFilter, name: *const ::std::os::raw::c_char, value: f32);
}
extern "C" {
    pub fn oidnGetFilterFloat(filter: OIDNFilter, name: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn oidnSetFilterProgressMonitorFunction(
        filter: OIDNFilter,
        func: OIDNProgressMonitorFunction,
        userPtr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn oidnCommitFilter(filter: OIDNFilter);
}
extern "C" {
    pub fn oidnExecuteFilter(filter: OIDNFilter);
}
extern "C" {
    pub fn oidnExecuteFilterAsync(filter: OIDNFilter);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
